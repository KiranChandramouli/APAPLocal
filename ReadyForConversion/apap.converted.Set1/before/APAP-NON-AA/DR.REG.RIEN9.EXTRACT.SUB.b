*-----------------------------------------------------------------------------
* <Rating>-91</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE DR.REG.RIEN9.EXTRACT.SUB(REC.ID,CAP.TERM,INT.TERM,R.AA.ARR.TERM,COLL.VAL,OUT.STD.AMT1,OUT.STD.AMT.32,OUT.STD.AMT.33,Y.CUR.AMT)
*----------------------------------------------------------------------------
* Company Name   : APAP
* Company Name   : APAP
* Program Name   : DR.REG.RIEN9.EXTRACT.SUB
* Date           : 3-May-2013
*----------------------------------------------------------------------------
* Description:
*------------
* This is a call routine to the multi threaded job.
*----------------------------------------------------------------------------
*
* Modification History :
* ----------------------
*   Date       Author              Modification Description
* 28-08-2014   V.P.Ashokkumar       PACS00313072- Created CALL routine to reduce 2900 rating
* 09-12-2014   V.P.Ashokkumar       PACS00313072- Fixed all the fields
* 27-03-2015   V.P.Ashokkumar       PACS00313072- Updated mapping and performance change
*----------------------------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_BATCH.FILES
    $INSERT I_TSA.COMMON
    $INSERT I_F.CUSTOMER
    $INSERT I_F.INDUSTRY
    $INSERT I_F.COLLATERAL
    $INSERT I_F.EB.CONTRACT.BALANCES
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.RE.STAT.LINE.CONT
    $INSERT I_F.LIMIT
    $INSERT I_F.AA.TERM.AMOUNT
    $INSERT I_F.AA.INTEREST
    $INSERT I_F.AA.PAYMENT.SCHEDULE
    $INSERT I_F.AA.LIMIT
    $INSERT I_F.AA.OVERDUE
    $INSERT I_F.AA.ACCOUNT
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.RE.STAT.REP.LINE
    $INSERT I_F.RELATION
    $INSERT I_F.ACCOUNT
    $INCLUDE TAM.BP I_F.REDO.CATEGORY.CIUU
    $INCLUDE TAM.BP I_F.REDO.H.CUSTOMER.PROVISIONING
    $INCLUDE TAM.BP I_F.REDO.H.PROVISION.PARAMETER
    $INCLUDE TAM.BP I_F.REDO.CREATE.ARRANGEMENT
    $INCLUDE TAM.BP I_F.REDO.AZACC.DESC
    $INCLUDE REGREP.BP I_DR.REG.RIEN9.EXTRACT.COMMON
    $INCLUDE REGREP.BP I_F.DR.REG.RIEN9.PARAM
    $INCLUDE TAM.BP I_F.APAP.H.INSURANCE.DETAILS
*
    GOSUB PROCESS
    RETURN

PROCESS:
********
    R.AA.ARRANGEMENT = ''; AA.ARRANGEMENT.ERR = ''; YPRIN.LINE = ''; YACC.LINE = ''; Y.CUR.AMT = ''
    CALL F.READ(FN.AA.ARRANGEMENT,REC.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,AA.ARRANGEMENT.ERR)
    CCY.VAL = R.AA.ARRANGEMENT<AA.ARR.CURRENCY>
    CUS.ID = R.AA.ARRANGEMENT<AA.ARR.CUSTOMER>
    APP.ID = 'ACCOUNT'; AC.ID = ''
    AC.ID = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID,1>       ;* ACCOUNT is 1st multi-value.
    CALL F.READ(FN.EB.CONTRACT.BALANCES,AC.ID,R.EB.CONTRACT.BALANCES,F.EB.CONTRACT.BALANCES,EB.CONTRACT.BALANCES.ERR)
    R.ACCOUNT = ''; ERR.ACCOUNT = ''; L.OD.STATUS.VAL = ''
    CALL F.READ(FN.ACCOUNT,AC.ID,R.ACCOUNT,F.ACCOUNT,ERR.ACCOUNT)
    L.OD.STATUS.VAL = R.ACCOUNT<AC.LOCAL.REF,L.OD.STATUS.POS>
    YCAL.TODAY = TODAY
    CALL CDT('',YCAL.TODAY,'-1C')
    GOSUB GET.ECB.TYPE1
    GOSUB GET.ECB.TYPE2
    GOSUB GET.PAY.SCH
    GOSUB GET.COLL.TYPE
    GOSUB GET.FIN.COV.AMT
    Y.CUR.AMT = CUR.AMT:"_":INS.AMT.VAL:"_":YACC.LINE
    RETURN

GET.PAY.SCH:
************
    ArrangementID = REC.ID
    idPropertyClass = 'PAYMENT.SCHEDULE'
    idProperty = ''; returnIds = ''; returnConditions = ''; returnError = ''; effectiveDate = ''; MATUR.DATE = ''
    CALL AA.GET.ARRANGEMENT.CONDITIONS(ArrangementID, idPropertyClass, idProperty, effectiveDate, returnIds, returnConditions, returnError)
    R.AA.PAY.SCH = RAISE(returnConditions)
    MATUR.DATE = INT.TERM

    PROP.POS = ''; CAP.TERM = ''; SM.POS = ''; VM.POS = ''; FRQ1 = ''; FRQ2 = ''; FRQ3 = ''; INT.TERM = ''
    FINDSTR 'ACCOUNT' IN R.AA.PAY.SCH<AA.PS.PROPERTY> SETTING PROP.POS,SM.POS,VM.POS THEN
        DUE.FRQ = R.AA.PAY.SCH<AA.PS.DUE.FREQ,PROP.POS,SM.POS>
        FRQ1 = DUE.FRQ[1,3]
        FRQ2 = DUE.FRQ[5,3]
        FRQ3 = DUE.FRQ[9,3]
        GOSUB FREQ.CHK.INT
        CAP.TERM = INT.TERM
    END

    INT.TERM = ''; PROP.POS = ''; DUE.FRQ = ''; SM.POS = ''; VM.POS = ''; FRQ1 = ''; FRQ2 = ''; FRQ3 = ''
    FINDSTR 'PRINCIPALINT' IN R.AA.PAY.SCH<AA.PS.PROPERTY> SETTING PROP.POS,SM.POS,VM.POS THEN
        DUE.FRQ = R.AA.PAY.SCH<AA.PS.DUE.FREQ,PROP.POS,SM.POS>
        FRQ1 = DUE.FRQ[1,3]
        FRQ2 = DUE.FRQ[5,3]
        FRQ3 = DUE.FRQ[9,3]
        GOSUB FREQ.CHK.INT
    END
    RETURN

FREQ.CHK.INT:
*************
    BEGIN CASE
    CASE FRQ1[2,1] GT 0
        INT.TERM = '1'
    CASE FRQ2[2,1] EQ 6
        INT.TERM = '2'
    CASE FRQ2[2,1] EQ 4
        INT.TERM = '3'
    CASE FRQ2[2,1] EQ 3
        INT.TERM = '4'
    CASE FRQ2[2,1] EQ 2
        INT.TERM = '6'
    CASE FRQ2[2,1] EQ 1
        INT.TERM = '12'
    CASE FRQ3 EQ ''
        INT.TERM = '99'
    END CASE
    RETURN

GET.COLL.TYPE:
**************
    COLL.TYPE = ''; COLL.CODE = ''
    ArrangementID = REC.ID; idPropertyClass = 'TERM.AMOUNT'
    idProperty = ''; effectiveDate = ''; returnIds = ''; returnConditions = ''; returnError = ''
    CALL AA.GET.ARRANGEMENT.CONDITIONS(ArrangementID, idPropertyClass, idProperty, effectiveDate, returnIds, returnConditions, returnError)
    R.AA.ARR.TERM = RAISE(returnConditions)
    COLL.ID = R.AA.ARR.TERM<AA.AMT.LOCAL.REF,L.AA.COL.POS,1>
    CALL F.READ(FN.COLLATERAL,COLL.ID,R.COLLATERAL,F.COLLATERAL,COLLATERAL.ERR)
    COLL.TYPE = R.COLLATERAL<COLL.COLLATERAL.TYPE>
    COLL.CODE = R.COLLATERAL<COLL.COLLATERAL.CODE>
    BEGIN CASE
    CASE COLL.CODE EQ 100 AND (COLL.TYPE GE 101 AND COLL.TYPE LE 103)
        COLL.VAL = 'V1'
    CASE COLL.CODE EQ 150 AND (COLL.TYPE GE 151 AND COLL.TYPE LE 153)
        COLL.VAL = 'V2'
    CASE COLL.CODE EQ 200 AND (COLL.TYPE GE 201 AND COLL.TYPE LE 203)
        COLL.VAL = 'V3'
    CASE COLL.CODE EQ 250 AND COLL.TYPE EQ 251
        COLL.VAL = 'V3'
    CASE COLL.CODE EQ 300 AND COLL.TYPE EQ 301
        COLL.VAL = 'P1'
    CASE COLL.CODE EQ 350 AND (COLL.TYPE GE 351 AND COLL.TYPE LE 357)
        COLL.VAL = 'P2'
    CASE COLL.CODE EQ 450 AND (COLL.TYPE GE 451 AND COLL.TYPE LE 458)
        COLL.VAL = 'HI'
    CASE COLL.CODE EQ 500 AND COLL.TYPE EQ 501
        COLL.VAL = 'H2'
    CASE COLL.CODE EQ 550 AND COLL.TYPE EQ 551
        COLL.VAL = 'H3'
    CASE COLL.CODE EQ 600 AND COLL.TYPE EQ 601
        COLL.VAL = 'H4'
    CASE COLL.CODE EQ 650 AND COLL.TYPE EQ 651
        COLL.VAL = 'H5'
    CASE COLL.CODE EQ 700 AND COLL.TYPE EQ 701
        COLL.VAL = 'H6'
    CASE COLL.CODE EQ 750 AND COLL.TYPE EQ 751
        COLL.VAL = 'O1'
    CASE COLL.CODE EQ 800 AND COLL.TYPE EQ 801
        COLL.VAL = 'O2'
    CASE COLL.CODE EQ 850 AND COLL.TYPE EQ 851
        COLL.VAL = 'S1'
    CASE COLL.CODE EQ 900 AND COLL.TYPE EQ 901
        COLL.VAL = 'S2'
    CASE COLL.CODE EQ 950 AND COLL.TYPE EQ 951
        COLL.VAL = 'S3'
    CASE COLL.CODE EQ 970 AND COLL.TYPE EQ 971
        COLL.VAL = 'S4'
    CASE COLL.CODE EQ 995 AND COLL.TYPE EQ 995
        COLL.VAL = 'NA'
    END CASE
    RETURN

GET.ECB.TYPE1:
**************
    OUT.STD.AMT = ''; CUR.AMT = ''; TOTCOMMITMENT.POS = ''; CURCOMMITMENT.POS = ''
    CURACCOUNT.POS = ''; OUT.STD.AMT.32 = ''; OUT.STD.AMT1 = ''; OUT.STD.AMT2 = ''
    YASST.TPE.VAL = R.EB.CONTRACT.BALANCES<ECB.CURR.ASSET.TYPE>
    LOCATE 'TOTCOMMITMENT' IN YASST.TPE.VAL<1,1> SETTING TOTCOMMITMENT.POS THEN
        OPEN.BAL = 0; CR.MVMT = 0; DR.MVMT = 0
        OPEN.BAL = R.EB.CONTRACT.BALANCES<ECB.OPEN.BALANCE,TOTCOMMITMENT.POS>
        CR.MVMT = R.EB.CONTRACT.BALANCES<ECB.CREDIT.MVMT,TOTCOMMITMENT.POS>
        DR.MVMT = R.EB.CONTRACT.BALANCES<ECB.DEBIT.MVMT,TOTCOMMITMENT.POS>
        TOTCOM = OPEN.BAL + CR.MVMT + DR.MVMT
        TOTCOM = ABS(TOTCOM)
    END

    LOCATE 'CURCOMMITMENT' IN YASST.TPE.VAL<1,1> SETTING CURCOMMITMENT.POS THEN
        OPEN.BAL = 0; CR.MVMT = 0; DR.MVMT = 0
        OPEN.BAL = R.EB.CONTRACT.BALANCES<ECB.OPEN.BALANCE,CURCOMMITMENT.POS>
        CR.MVMT = R.EB.CONTRACT.BALANCES<ECB.CREDIT.MVMT,CURCOMMITMENT.POS>
        DR.MVMT = R.EB.CONTRACT.BALANCES<ECB.DEBIT.MVMT,CURCOMMITMENT.POS>
        CURCOM = OPEN.BAL + CR.MVMT + DR.MVMT
        CURCOM = ABS(CURCOM)
    END
    CUR.AMT = TOTCOM - CURCOM
    CUR.AMT = ABS(CUR.AMT)

    LINE.CONT = ''; TOTAL.DUE.AMT.32 = 0
    BALANCES.TO.CHECK = 'CURACCOUNT':FM:'DE1ACCOUNT':FM:'DE2ACCOUNT':FM:'DUEACCOUNT':FM:'DE3ACCOUNT':FM:'DELACCOUNT':FM:'NABACCOUNT'
    TOT.BALANCES = DCOUNT(BALANCES.TO.CHECK,FM)
    GOSUB GET.SCHEDULES.1
    OUT.STD.AMT1 = TOTAL.DUE.AMT
    OUT.STD.AMT1 = ABS(OUT.STD.AMT1)
    OUT.STD.AMT.32 = TOTAL.DUE.AMT.32
    OUT.STD.AMT.32 = ABS(OUT.STD.AMT.32)
    BALANCES.TO.CHECK = 'CURACCOUNT'
    GOSUB GET.RE.STAT.LINE.CONT
    YACC.LINE = LINE.CONT
    RETURN

GET.SCHEDULES.1:
****************
    ERROR.MESSAGE = ''; BAL.DETAILS = ''; TOTAL.DUE.AMT = ''; TOTAL.DUE.AMT.32 = ''
    START.DATE = YCAL.TODAY
    END.DATE = YCAL.TODAY
    REQUEST.TYPE<4>='ECB'

    I = 1
    LOOP
    WHILE I LE TOT.BALANCES
        BALANCE.TO.CHECK=BALANCES.TO.CHECK<I>
        DAT.BALANCES = ''; BAL.DETAILS = ''
        CALL AA.GET.PERIOD.BALANCES(AC.ID, BALANCE.TO.CHECK,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
        DAT.BALANCES=BAL.DETAILS<4>
        TOTAL.DUE.AMT+=DAT.BALANCES
        BALANCE.TO.CHECK=BALANCES.TO.CHECK<I>
        IF BALANCE.TO.CHECK EQ 'DE3ACCOUNT' OR BALANCE.TO.CHECK EQ 'DELACCOUNT' OR BALANCE.TO.CHECK EQ 'NABACCOUNT' THEN
            TOTAL.DUE.AMT.32+=DAT.BALANCES
        END
        I += 1
    REPEAT
    RETURN

GET.ECB.TYPE2:
**************
    OUT.STD.AMT.33 = ''; LINE.CONT = ''
    BALANCES.TO.CHECK = 'DE3PRINCIPALINT':FM:'DELPRINCIPALINT':FM:'NABPRINCIPALINT':FM:'DE3PRINCIPALINTSP':FM:'DELPRINCIPALINTSP':FM:'NABPRINCIPALINTSP'
    TOT.BALANCES = DCOUNT(BALANCES.TO.CHECK,FM)
    GOSUB GET.SCHEDULES.1
    OUT.STD.AMT.33 = TOTAL.DUE.AMT
    OUT.STD.AMT.33 = ABS(OUT.STD.AMT.33)
    RETURN

GET.RE.STAT.LINE.CONT:
**********************
    ACC.NO.LINE = ''; Y.CONSOL.KEY = ''; LINE.CONT = ''
    IF R.EB.CONTRACT.BALANCES THEN
        Y.CONSOL.KEY = R.EB.CONTRACT.BALANCES<ECB.CONSOL.KEY>
        Y.CONSOL.PART = FIELD(Y.CONSOL.KEY,'.',1,16)
        Y.IN.CONSOL.KEY = Y.CONSOL.PART:'.':BALANCE.TO.CHECK
        Y.VARIABLE = ''; Y.RPRTS = ''; Y.LINES = ''; Y.LINE = ''; R.LINES = ''
        CALL RE.CALCUL.REP.AL.LINE(Y.IN.CONSOL.KEY,Y.RPRTS,Y.LINES,Y.VARIABLE)
        Y.LINE = Y.RPRTS:'.':Y.LINES
        CALL F.READ(FN.RE.STAT.REP.LINE,Y.LINE,R.LINE,F.RE.STAT.REP.LINE,REP.ERR)
        ACC.NO.LINE = R.LINE<RE.SRL.DESC,1>
    END
    IF ACC.NO.LINE[1,1] NE '8' THEN
        LINE.CONT = ACC.NO.LINE
    END
    RETURN

GET.FIN.COV.AMT:
***************
    ERR.AHIIC = ''; R.APAP.H.INSURANCE.ID.CONCAT = ''; CONCAT.INS.TYPE = ''; CONCAT.INS.AMT = ''; INS.AMT.A = 0; INS.AMT.B = 0
    CALL F.READ(FN.APAP.H.INSURANCE.ID.CONCAT,REC.ID,R.APAP.H.INSURANCE.ID.CONCAT,F.APAP.H.INSURANCE.ID.CONCAT,ERR.AHIIC)
    IF NOT(R.APAP.H.INSURANCE.ID.CONCAT) THEN
        RETURN
    END

    CONCAT.INS.TYPE = R.APAP.H.INSURANCE.ID.CONCAT<2>
    CONCAT.INS.AMT = R.APAP.H.INSURANCE.ID.CONCAT<3>
    FINDSTR 'VI' IN CONCAT.INS.TYPE<1> SETTING VI.POSN,VISM,VIVM THEN
        INS.AMT.A = CONCAT.INS.AMT<VI.POSN,VISM>
    END

    FINDSTR 'VI50' IN CONCAT.INS.TYPE<1> SETTING VI5.POSN,VI5SM,VI5VM THEN
        INS.AMT.A += CONCAT.INS.AMT<VI5.POSN,VI5SM>
    END

    FINDSTR 'PVC' IN CONCAT.INS.TYPE<1> SETTING PVC.POSN,PVCSM,PVCVM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVC.POSN,PVCSM>
    END

    FINDSTR 'PVC50' IN CONCAT.INS.TYPE<1> SETTING PVC5.POSN,PVCSM,PVCVM THEN
        INS.AMT.B = CONCAT.INS.AMT<PVC5.POSN,PVCSM>
    END

    FINDSTR 'PVP' IN CONCAT.INS.TYPE<1> SETTING PVP.POSN,PVPSM,PVCVM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVP.POSN,PVPSM>
    END

    FINDSTR 'PVP50' IN CONCAT.INS.TYPE<1> SETTING PVP5.POSN,PVP5SM,PVP5VM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVP5.POSN,PVP5SM>
    END

    IF INS.AMT.A GT INS.AMT.B THEN
        INS.AMT.VAL = INS.AMT.A
    END ELSE
        INS.AMT.VAL = INS.AMT.B
    END
    RETURN
END
