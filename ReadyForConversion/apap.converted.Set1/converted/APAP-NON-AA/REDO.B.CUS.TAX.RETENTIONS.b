SUBROUTINE REDO.B.CUS.TAX.RETENTIONS(Y.NCF.CUS.ID)
*---------------------------------------------------------------------------------------------
*
* Description           : This is the Routine Used to fetch all the movements or transactions made by the customer monthly.
*
* Developed By          : Amaravathi Krithika B
*
* Development Reference : RegN11
*
* Attached To           : Batch - BNK/REDO.B.CUS.TAX.RETENTIONS
*
* Attached As           : Online Batch Routine to COB
*---------------------------------------------------------------------------------------------
* Input Parameter:
*----------------*
* Argument#1 : Y.CUS.ID -@ID of customer
*
*-----------------*
* Output Parameter:
*-----------------*
* Argument#4 : NA
*
*---------------------------------------------------------------------------------------------
*  M O D I F I C A T I O N S
* ***************************
*---------------------------------------------------------------------------------------------
* Defect Reference       Modified By                    Date of Change        Change Details
*-----------------------------------------------------------------------------------------------------------------
* PACS00375393           Ashokkumar.V.P                 11/12/2014            New mapping changes - Rewritten the whole source.
*---------------------------------------------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.CUSTOMER
    $INSERT I_F.TELLER
    $INSERT I_F.ACCOUNT
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.FOREX
    $INSERT I_F.DATES
    $INSERT I_BATCH.FILES
    $INSERT I_F.AC.CHARGE.REQUEST
    $INSERT I_F.STMT.ENTRY

    $INSERT I_REDO.B.CUS.TAX.RETENTIONS.COMMON
    $INSERT I_REDO.GENERIC.FIELD.POS.COMMON
    $INSERT I_F.REDO.H.TAX.DATA.CHECKS
    $INSERT I_F.REDO.H.REPORTS.PARAM
    $INSERT I_F.REDO.NCF.ISSUED
    $INSERT I_F.REDO.CLEARING.OUTWARD
    $INSERT I_F.REDO.APAP.CLEARING.INWARD

    GOSUB CHK.REDO.NCF
RETURN

CHK.REDO.NCF:
*-----------
*Getting the Customer ID from REDO.NCF.ISSUED Application
    Y.FIN.TAX.AMT = ''; Y.CUS.IDEN = '';  Y.IDEN.TYPE = '0'; L.TT.WV.TAX.VAL = ''
    Y.CUS.NAT = ''; Y.CUS.CIDENT = ''; Y.CUS.RNC = ''; Y.CUS.LEGAL.ID = ''; Y.CUS.FORE = ''
    L.CU.ACTANAC.VAL = ''; L.CU.NOUNICO.VAL = ''; Y.TXN.REF = ''; Y.DATE.RCF = ''
    YLEG.IDEN.VAL = ''; ENT.ID = ''; R.STMT.ENTRY = ''; STMT.ENTRY.ERR = ''; Y.ACR.STATUS = ''
    Y.FX.STATUS = ''; Y.FT.STATUS = ''; Y.TT.STATUS = ''; TRANS.REF = ''; AMT.LCY = ''

    ENT.ID = FIELD(Y.NCF.CUS.ID,'*',2)
    CALL F.READ(FN.STMT.ENTRY,ENT.ID,R.STMT.ENTRY,F.STMT.ENTRY,STMT.ENTRY.ERR)
    IF STMT.ENTRY.ERR THEN
        RETURN
    END
    THER.REF = R.STMT.ENTRY<AC.STE.THEIR.REFERENCE>
    AMT.LCY = R.STMT.ENTRY<AC.STE.AMOUNT.LCY>
    Y.CUSTOMER = R.STMT.ENTRY<AC.STE.CUSTOMER.ID>
    Y.DATE.RCF = R.STMT.ENTRY<AC.STE.BOOKING.DATE>
    TRANS.REF = R.STMT.ENTRY<AC.STE.TRANS.REFERENCE>
    Y.TXN.REF = FIELD(TRANS.REF,'\',1)
    GOSUB GET.CUS.DTLS
RETURN

GET.CUS.DTLS:
*-----------
*Getting the Customer Related Values.
    BEGIN CASE
        CASE Y.TXN.REF[1,2] EQ 'TT'
            GOSUB READ.TELLER
            Y.TT.STATUS = R.TELLER<TT.TE.RECORD.STATUS>
            IF NOT(R.TELLER) OR Y.TT.STATUS EQ 'REVE' THEN
                RETURN
            END
            Y.FIN.TAX.AMT = R.TELLER<TT.TE.LOCAL.REF,Y.TT.TAX.AMT.POS>
            L.TT.WV.TAX.VAL = R.TELLER<TT.TE.LOCAL.REF,L.TT.WV.TAX.POS>
            YLEG.IDEN.VAL = R.TELLER<TT.TE.LOCAL.REF,L.TT.LEGAL.ID.POS>
            GOSUB TT.TRANSACTION
        CASE Y.TXN.REF[1,2] EQ 'FT'
            GOSUB READ.FUNDS.TRANS
            Y.FT.STATUS = R.FUNDS.TRANSFER<FT.RECORD.STATUS>
            IF NOT(R.FUNDS.TRANSFER) OR Y.FT.STATUS EQ 'REVE' THEN
                RETURN
            END
            Y.FIN.TAX.AMT = R.FUNDS.TRANSFER<FT.LOCAL.REF,Y.FT.TAX.AMT.POS>
            L.TT.WV.TAX.VAL = R.FUNDS.TRANSFER<FT.LOCAL.REF,L.FT.WV.TAX.POS>
            YLEG.IDEN.VAL = R.FUNDS.TRANSFER<FT.LOCAL.REF,L.FT.LEGAL.ID.POS>
            GOSUB FT.TRANSACTION
        CASE Y.TXN.REF[1,2] EQ 'FX'
            GOSUB READ.FOREX
            Y.FX.STATUS = R.FOREX<FX.RECORD.STATUS>
            IF NOT(R.FOREX) OR Y.FX.STATUS EQ 'REVE' THEN
                RETURN
            END
            Y.FIN.TAX.AMT = R.FOREX<FX.TAX.AMOUNT>
            YLEG.IDEN.VAL = R.FOREX<FX.LOCAL.REF,L.FX.LEGAL.ID.POS>
            GOSUB FX.TRANSACTION
        CASE Y.TXN.REF[1,3] EQ 'CHG'
            GOSUB READ.AC.REQUEST
            Y.ACR.STATUS = R.AC.CHARGE.REQUEST<CHG.RECORD.STATUS>
            IF NOT(R.AC.CHARGE.REQUEST) OR Y.ACR.STATUS EQ 'REVE' THEN
                RETURN
            END
            Y.FIN.TAX.AMT = AMT.LCY
            GOSUB ACR.TRANSACTION
        CASE 1
            GOSUB GET.INWARD.PROCESS
            GOSUB GET.OUTWARD.PROCESS
    END CASE

    IF L.TT.WV.TAX.VAL EQ 'YES' OR L.TT.WV.TAX.VAL EQ 'SI' THEN
        Y.CUS.IDEN = Y.APAP.ID
    END

    IF Y.FIN.TAX.AMT AND Y.CUS.IDEN NE '' THEN
        GOSUB WRITE.SEQ.VAL
    END
RETURN

TT.TRANSACTION:
***************
    IF NOT(Y.CUSTOMER) THEN
        GOSUB TT.ACCT.VAL
        GOSUB READ.ACCOUNT
    END
    GOSUB READ.CUSTOMER
    GOSUB CUST.IDEN.1
RETURN

TT.ACCT.VAL:
************
    FT.TT.DEBIT.ACCT.NO = ''
    Y.DR.CR.MARKER = R.TELLER<TT.TE.DR.CR.MARKER>
    IF Y.DR.CR.MARKER EQ 'DEBIT' THEN
        FT.TT.DEBIT.ACCT.NO = R.TELLER<TT.TE.ACCOUNT.1>
    END ELSE
        FT.TT.DEBIT.ACCT.NO = R.TELLER<TT.TE.ACCOUNT.2>
    END
RETURN

FT.TRANSACTION:
***************
    IF NOT(Y.CUSTOMER) THEN
        FT.TT.DEBIT.ACCT.NO = R.FUNDS.TRANSFER<FT.DEBIT.ACCT.NO>
        GOSUB READ.ACCOUNT
    END
    IF FT.TT.DEBIT.ACCT.NO EQ YTAX.ACCT THEN
        FT.TT.DEBIT.ACCT.NO = R.FUNDS.TRANSFER<FT.CREDIT.ACCT.NO>
        GOSUB READ.ACCOUNT
    END
    GOSUB READ.CUSTOMER
    GOSUB CUST.IDEN.1
RETURN

FX.TRANSACTION:
***************
    IF NOT(Y.CUSTOMER) THEN
        FT.TT.DEBIT.ACCT.NO = R.FOREX<FX.OUR.ACCOUNT.PAY>
        GOSUB READ.ACCOUNT
    END
    GOSUB READ.CUSTOMER
    GOSUB CUST.IDEN.1
RETURN

ACR.TRANSACTION:
****************
    IF NOT(Y.CUSTOMER) THEN
        FT.TT.DEBIT.ACCT.NO = R.AC.CHARGE.REQUEST<CHG.DEBIT.ACCOUNT>
        GOSUB READ.ACCOUNT
    END
    GOSUB READ.CUSTOMER
    GOSUB GET.CUST.IDEN
    IF NOT(Y.CUS.IDEN) THEN
        Y.CUS.IDEN = Y.CUS.NAT:Y.CUS.LEGAL.ID
    END
RETURN

GET.INWARD.PROCESS:
*******************
    R.REDO.APAP.CLEARING.INWARD = ''; REDO.APAP.CLEARING.INWARD.ERR = ''
    CALL F.READ(FN.REDO.APAP.CLEARING.INWARD,Y.TXN.REF,R.REDO.APAP.CLEARING.INWARD,F.REDO.APAP.CLEARING.INWARD,REDO.APAP.CLEARING.INWARD.ERR)
    IF NOT(R.REDO.APAP.CLEARING.INWARD) THEN
        RETURN
    END
    Y.FIN.TAX.AMT = R.REDO.APAP.CLEARING.INWARD<CLEAR.CHQ.TAX.AMOUNT>
    Y.CUSTOMER = R.REDO.APAP.CLEARING.INWARD<CLEAR.CHQ.CUSTOMER.NO>
    IF NOT(Y.CUSTOMER) THEN
        FT.TT.DEBIT.ACCT.NO = R.REDO.APAP.CLEARING.INWARD<CLEAR.CHQ.ACCOUNT.NO>
        GOSUB READ.ACCOUNT
    END
    GOSUB READ.CUSTOMER
    GOSUB GET.CUST.IDEN
    IF NOT(Y.CUS.IDEN) THEN
        Y.CUS.IDEN = Y.CUS.NAT:Y.CUS.LEGAL.ID
    END
RETURN

GET.OUTWARD.PROCESS:
********************
    DRAW.ACCT = ''; CHQ.NO = ''; OUT.ID = ''; YTEMP.FIN.TAX.AMT = 0
    DRAW.ACCT = FIELD(Y.TXN.REF,'.',1); CHQ.NO = FIELD(Y.TXN.REF,'.',2)
    CHQ.NO = TRIM(CHQ.NO,"0","L")
    OUT.ID = DRAW.ACCT:'-':CHQ.NO
    R.REDO.CLEARING.OUTWARD = ''; REDO.CLEARING.OUTWARD.ERR = ''
    CALL F.READ(FN.REDO.CLEARING.OUTWARD,OUT.ID,R.REDO.CLEARING.OUTWARD,F.REDO.CLEARING.OUTWARD,REDO.CLEARING.OUTWARD.ERR)
    IF NOT(R.REDO.CLEARING.OUTWARD) THEN
        RETURN
    END
    YTEMP.FIN.TAX.AMT = R.REDO.CLEARING.OUTWARD<CLEAR.OUT.AMOUNT> * 0.0015
    Y.FIN.TAX.AMT = FMT(YTEMP.FIN.TAX.AMT,'R2')
    FT.TT.DEBIT.ACCT.NO = DRAW.ACCT
    GOSUB READ.ACCOUNT
    GOSUB READ.CUSTOMER
    GOSUB GET.CUST.IDEN
    IF NOT(Y.CUS.IDEN) THEN
        Y.CUS.IDEN = Y.CUS.NAT:Y.CUS.LEGAL.ID
    END
RETURN

CUST.IDEN.1:
************
    GOSUB GET.CUST.IDEN
    IF Y.CUS.IDEN THEN
        RETURN
    END ELSE
        GOSUB GET.CUST.ID
    END
RETURN

GET.CUST.IDEN:
**************
    IF R.CUSTOMER THEN
        Y.CUS.NAT = R.CUSTOMER<EB.CUS.NATIONALITY>
        Y.CUS.CIDENT = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.CIDENT.POS>
        Y.CUS.RNC = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.RNC.POS>
        Y.CUS.FORE = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.FORE.POS>
        Y.CUS.LEGAL.ID = R.CUSTOMER<EB.CUS.LEGAL.ID,1,1>
        L.CU.ACTANAC.VAL = R.CUSTOMER<EB.CUS.LOCAL.REF,L.CU.ACTANAC.POS>
        L.CU.NOUNICO.VAL = R.CUSTOMER<EB.CUS.LOCAL.REF,L.CU.NOUNICO.POS>
    END ELSE
        RETURN
    END

    BEGIN CASE
        CASE Y.CUS.CIDENT NE ''
            Y.CUS.IDEN = Y.CUS.CIDENT
            Y.IDEN.TYPE = '2'
        CASE Y.CUS.RNC NE ''
            Y.CUS.IDEN = Y.CUS.RNC
            Y.IDEN.TYPE = '1'
        CASE Y.CUS.FORE NE ''
            Y.CUS.IDEN = Y.CUS.FORE
        CASE L.CU.NOUNICO.VAL NE ''
            Y.CUS.IDEN = L.CU.NOUNICO.VAL
        CASE L.CU.ACTANAC.VAL NE ''
            Y.CUS.IDEN = L.CU.ACTANAC.VAL
    END CASE
RETURN

READ.CUSTOMER:
**************
    R.CUSTOMER = ''; Y.CUS.ERR = ''
    CALL F.READ(FN.CUSTOMER,Y.CUSTOMER,R.CUSTOMER,F.CUSTOMER,Y.CUS.ERR)
RETURN

GET.CUST.ID:
************
    Y.NATION = ''; YLEG.TYPE = ''
    YLEG.TYPE = FIELD(YLEG.IDEN.VAL,'.',1)
    BEGIN CASE
        CASE YLEG.TYPE EQ 'CEDULA'
            Y.CUS.IDEN = FIELD(YLEG.IDEN.VAL,'.',2)
            Y.IDEN.TYPE = '2'
        CASE YLEG.TYPE EQ 'RNC'
            Y.CUS.IDEN = FIELD(YLEG.IDEN.VAL,'.',2)
            Y.IDEN.TYPE = '1'
        CASE YLEG.TYPE EQ 'PASAPORTE'
            Y.CUS.IDEN = FIELD(YLEG.IDEN.VAL,'.',2)
        CASE 1
            Y.CUS.IDEN = Y.CUS.NAT:Y.CUS.LEGAL.ID
    END CASE
RETURN

READ.ACCOUNT:
*************
    R.ACCOUNT = ''; ACC.ERR = ''
    CALL F.READ(FN.ACCOUNT,FT.TT.DEBIT.ACCT.NO,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    IF R.ACCOUNT THEN
        Y.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>
    END
RETURN

READ.TELLER:
************
    R.TELLER = ''; TELLER.ERR = '';Y.TRANS.REF = ''; TELLER.HIS.ERR = ''; Y.TT.STATUS = ''
    CALL F.READ(FN.TELLER,Y.TXN.REF,R.TELLER,F.TELLER,TELLER.ERR)
    IF NOT(R.TELLER) THEN
        Y.TRANS.REF = Y.TXN.REF
        CALL EB.READ.HISTORY.REC(F.TELLER.HIS,Y.TRANS.REF,R.TELLER,TELLER.HIS.ERR)
    END
RETURN

READ.FUNDS.TRANS:
*****************
    R.FUNDS.TRANSFER = ''; FUNDS.TRANSFER.ERR = ''; Y.TRANS.REF = ''; FUNDS.TRANSFER.HIS.ERR = ''
    CALL F.READ(FN.FUNDS.TRANSFER,Y.TXN.REF,R.FUNDS.TRANSFER,F.FUNDS.TRANSFER,FUNDS.TRANSFER.ERR)
    IF NOT(R.FUNDS.TRANSFER) THEN
        Y.TRANS.REF = Y.TXN.REF
        CALL EB.READ.HISTORY.REC(F.FUNDS.TRANSFER.HIS,Y.TRANS.REF,R.FUNDS.TRANSFER,FUNDS.TRANSFER.HIS.ERR)
    END
RETURN

READ.FOREX:
***********
    R.FOREX = ''; FX.ERR = ''; FOREX.ERR = ''
    CALL F.READ(FN.FOREX,Y.TXN.REF,R.FOREX,F.FOREX,FX.ERR)
    IF FX.ERR THEN
        Y.TRANS.REF = Y.TXN.REF
        CALL EB.READ.HISTORY.REC(F.FOREX.HIS,Y.TRANS.REF,R.FOREX,FOREX.ERR)
    END
RETURN

READ.AC.REQUEST:
****************
    ERR.AC.CHARGE.REQUEST = ''; R.AC.CHARGE.REQUEST = ''; AC.CHARGE.REQUEST.HIS.ERR = ''; Y.TRANS.REF = ''
    CALL F.READ(FN.AC.CHARGE.REQUEST,Y.TXN.REF,R.AC.CHARGE.REQUEST,F.AC.CHARGE.REQUEST,ERR.AC.CHARGE.REQUEST)
    IF NOT(R.AC.CHARGE.REQUEST) THEN
        Y.TRANS.REF = Y.TXN.REF
        CALL EB.READ.HISTORY.REC(F.AC.CHARGE.REQUEST.HST,Y.TRANS.REF,R.AC.CHARGE.REQUEST,AC.CHARGE.REQUEST.HIS.ERR)
    END
RETURN

WRITE.SEQ.VAL:
*-------------
*Writing the Values into the Temp Dir.
    YF.DATE.RCF = ''
    YF.DATE.RCF = Y.DATE.RCF[1,6]
    Y.FINAL.MSG = Y.CUS.IDEN:',':Y.IDEN.TYPE:',':YF.DATE.RCF:',':Y.FIN.TAX.AMT
    WRITESEQ Y.FINAL.MSG APPEND TO Y$.SEQFILE.PTR ELSE
        Y.ERR.MSG = "Unable to Write '":Y.FILE.NAME:"'"
    END
RETURN

RAISE.ERR.C.22:
*--------------
    MON.TP = "04"
    Y.ERR.MSG = "Record not found"
    REC.CON = "REGN11-":Y.ERR.MSG
    DESC = "REGN11-":Y.ERR.MSG
    INT.CODE = 'REP001'
    INT.TYPE = 'ONLINE'
    BAT.NO   = ''
    BAT.TOT  = ''
    INFO.OR  = ''
    INFO.DE  = ''
    ID.PROC  = ''
    EX.USER  = ''
    EX.PC    = ''
    CALL REDO.INTERFACE.REC.ACT(INT.CODE,INT.TYPE,BAT.NO,BAT.TOT,INFO.OR,INFO.DE,ID.PROC,MON.TP,DESC,REC.CON,EX.USER,EX.PC)
RETURN
END
