$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.REV.NAB.ACCT.REACH.WOF(Y.ID)
*-----------------------------------------------------------------------------
* Company Name  : APAP DEV2.
* Developed By  : Marimuthu S
* Program Name  : REDO.B.REV.NAB.ACCT.REACH.WOF
*-----------------------------------------------------------------
* Description : This routine is used to reverse contingent cus a/c and internal ac
*-----------------------------------------------------------------
* Linked With   : -NA-
* In Parameter  : -NA-
* Out Parameter : -NA-
*-----------------------------------------------------------------
* Modification History :
*-----------------------
* Reference              Date                Description
* ODR-2011-12-0017      23-OCT-2011          WOF ACCOUTING - PACS00202156
* PACS00704032          14-NOV-2018          Fix Issue
*13-07-2023    CONVERSION TOOL     R22 AUTO CONVERSION     VM TO @VM, FM TO @FM,SM TO @SM
*13-07-2023    VICTORIA S          R22 MANUAL CONVERSION   CALL ROUTINE MODIFIED,VARIABLE NAME MODIFIED
*-----------------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_REDO.B.REV.NAB.ACCT.REACH.WOF.COMMON
    $INSERT I_F.ACCOUNT
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.REDO.AA.INT.CLASSIFICATION
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.REDO.AA.NAB.HISTORY
    $USING APAP.TAM
MAIN:

    GOSUB PROCESS
    GOSUB PGM.END

PROCESS:


    CALL F.READ(FN.REDO.AA.NAB.HISTORY,Y.ID,R.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY,AA.HIS.ERR)
*PACS00704032 - S
    NAB.AMT = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.NAB.INTEREST> + R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACC.AMT> - SUM(R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.PAID>)
*PACS00704032 - E
    IF NAB.AMT EQ '' OR NAB.AMT EQ 0 THEN
        RETURN
    END

    CALL F.READ(FN.AA.ARRANGEMENT,Y.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,AA.AR.ERR)
    Y.LOAN.AC = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>
    Y.LOAN.COMP = R.AA.ARRANGEMENT<AA.ARR.CO.CODE>
    Y.LOAN.CUR = R.AA.ARRANGEMENT<AA.ARR.CURRENCY>

    CALL F.READ(FN.ACCOUNT,Y.LOAN.AC,R.ACC,F.ACCOUNT,AC.ERR)
    Y.LOAN.CATEG = R.ACC<AC.CATEGORY>

    CALL F.READ(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.AC,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,CON.ERR)
    IF NOT(R.REDO.CONCAT.ACC.NAB) THEN
        RETURN
    END

    GOSUB GET.ACCS

    DR.ACCOUNT.NUMBER = Y.INTERNAL.ACC
    CR.ACCOUNT.NUMBER = R.REDO.CONCAT.ACC.NAB<1>

    R.ACCOUNT.CONT = ''
    CALL F.READ(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT.CONT,F.ACCOUNT,AC.ERR)
    GOSUB FORM.DEBIT.ENTRY

    R.ACCOUNT.INT = ''
    CALL F.READ(FN.ACCOUNT,CR.ACCOUNT.NUMBER,R.ACCOUNT.INT,F.ACCOUNT,AC.ERR)
    GOSUB FORM.CREDIT.ENTRY

    GOSUB CAL.ACCOUNTING

RETURN

GET.ACCS:

    Y.INTERNAL.ACC = ''
    LOCATE Y.LOAN.CATEG IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.PROD.CATEGORY,1> SETTING POS.CMP THEN
        LOCATE Y.LOAN.CUR IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CURRENCY,POS.CMP,1> SETTING POS.CUR THEN
            Y.INTERNAL.ACC = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.DEBIT.INT.ACCOUNT,POS.CMP,POS.CUR>
        END
    END ELSE
        CALL OCOMO('Product Category not parameterized ':Y.ID)
        GOSUB PGM.END
    END
    IF Y.INTERNAL.ACC THEN
        Y.LOAN.CO.CODE = Y.LOAN.COMP
*CALL REDO.NAB.CREATE.INT.ACC(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC)
*R22 MANUAL CONVERSION
        APAP.TAM.redoNabCreateIntAcc(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC)
        Y.INTERNAL.ACC = Y.RET.INT.ACC
        CALL F.READ(FN.ACCOUNT,Y.INTERNAL.ACC,R.INT.ACC,F.ACCOUNT,ACC.ERR)
        ARR.ID="" ;*R22 MANUAL CONVERSION
        IF R.INT.ACC ELSE
            CALL OCOMO('Internal Account not created - ':ARR.ID)
            GOSUB PGM.END
        END

    END ELSE
        CALL OCOMO('Internal Account not parameterized ':Y.ID)
        GOSUB PGM.END
    END

RETURN

FORM.DEBIT.ENTRY:

    R.DR.STMT.ENTRY = ''
    R.DR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER> = DR.ACCOUNT.NUMBER
    R.DR.STMT.ENTRY<AC.STE.COMPANY.CODE> = R.ACCOUNT.CONT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.AMOUNT.LCY> = NAB.AMT * (-1)
    R.DR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '1'
    R.DR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = R.ACCOUNT.CONT<AC.CATEGORY>
    R.DR.STMT.ENTRY<AC.STE.VALUE.DATE> = TODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY> = R.ACCOUNT.CONT<AC.CURRENCY>
    R.DR.STMT.ENTRY<AC.STE.OUR.REFERENCE> = R.ACCOUNT.CONT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.EXPOSURE.DATE> = TODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY.MARKET> = '1'
    R.DR.STMT.ENTRY<AC.STE.TRANS.REFERENCE> = CR.ACCOUNT.NUMBER
    R.DR.STMT.ENTRY<AC.STE.NARRATIVE> = 'NAB-WOF-REV'
    R.DR.STMT.ENTRY<AC.STE.SYSTEM.ID> = 'AC'
    R.DR.STMT.ENTRY<AC.STE.BOOKING.DATE> = TODAY

    CHANGE @FM TO @SM IN R.DR.STMT.ENTRY ;*R22 AUTO CONVERSION
    CHANGE @SM TO @VM IN R.DR.STMT.ENTRY ;*R22 AUTO CONVERSION

    R.STMT.ENTRY<-1> = R.DR.STMT.ENTRY

RETURN

FORM.CREDIT.ENTRY:

    R.CR.STMT.ENTRY = ''
    R.CR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER> = CR.ACCOUNT.NUMBER
    R.CR.STMT.ENTRY<AC.STE.COMPANY.CODE> = R.ACCOUNT.INT<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.AMOUNT.LCY> = NAB.AMT
    R.CR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '51'
    R.CR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = R.ACCOUNT.INT<AC.CATEGORY>
    R.CR.STMT.ENTRY<AC.STE.VALUE.DATE> = TODAY
    R.CR.STMT.ENTRY<AC.STE.CURRENCY> = R.ACCOUNT.INT<AC.CURRENCY>
    R.CR.STMT.ENTRY<AC.STE.OUR.REFERENCE> = R.ACCOUNT.INT<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.EXPOSURE.DATE> = TODAY
    R.CR.STMT.ENTRY<AC.STE.CURRENCY.MARKET> = '1'
    R.CR.STMT.ENTRY<AC.STE.TRANS.REFERENCE> = CR.ACCOUNT.NUMBER
    R.DR.STMT.ENTRY<AC.STE.NARRATIVE> = 'NAB-WOF-REV'
    R.CR.STMT.ENTRY<AC.STE.SYSTEM.ID> = 'AC'
    R.CR.STMT.ENTRY<AC.STE.BOOKING.DATE> = TODAY

    CHANGE @FM TO @SM IN R.CR.STMT.ENTRY ;*R22 AUTO CONVERSION
    CHANGE @SM TO @VM IN R.CR.STMT.ENTRY ;*R22 AUTO CONVERSION

    R.STMT.ENTRY<-1> = R.CR.STMT.ENTRY

RETURN

CAL.ACCOUNTING:

    ACC.PRODUCT = 'AC'
    ACC.TYPE = 'SAO'
    IF Y.LOAN.COMP THEN
        CALL LOAD.COMPANY(Y.LOAN.COMP)
    END
    CALL EB.ACCOUNTING(ACC.PRODUCT,ACC.TYPE,R.STMT.ENTRY,'')

RETURN

PGM.END:


END
